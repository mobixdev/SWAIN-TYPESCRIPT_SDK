/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  AuthAuthResult,
  AuthLoginRequest,
} from '../models/index';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    AuthAuthResultFromJSON,
    AuthAuthResultToJSON,
    AuthLoginRequestFromJSON,
    AuthLoginRequestToJSON,
} from '../models/index';

export interface AuthLoginPostRequest {
    credentials: AuthLoginRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Authenticate with username and password and return JWT and refresh tokens
     * User login
     */
    async authLoginPostRaw(requestParameters: AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthAuthResult>> {
        if (requestParameters['credentials'] == null) {
            throw new runtime.RequiredError(
                'credentials',
                'Required parameter "credentials" was null or undefined when calling authLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthLoginRequestToJSON(requestParameters['credentials']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthAuthResultFromJSON(jsonValue));
    }

    /**
     * Authenticate with username and password and return JWT and refresh tokens
     * User login
     */
    async authLoginPost(requestParameters: AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthAuthResult> {
        const response = await this.authLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
