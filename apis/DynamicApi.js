"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
var WebSocket = require("ws");
/**
 *
 */
var DynamicApi = /** @class */ (function (_super) {
    __extends(DynamicApi, _super);
    function DynamicApi() {
        /**
         * Add websocket support to the API for real-time updates and notifications. This allows clients to subscribe to changes in data models and receive updates in real-time.
         */
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.wsConnections = {};
        return _this;
    }
    DynamicApi.prototype.connectWebSocket = function (model, event, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var wsUrl, apiKeyFunction, apiKey, ws;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wsUrl = "".concat(this.configuration.basePath.replace('http', 'ws'), "/ws/").concat(model, "/").concat(event);
                        apiKeyFunction = this.configuration.apiKey;
                        if (!apiKeyFunction) return [3 /*break*/, 2];
                        return [4 /*yield*/, apiKeyFunction('api_key')];
                    case 1:
                        apiKey = _a.sent();
                        _a.label = 2;
                    case 2:
                        ws = new WebSocket(wsUrl, [], {
                            headers: {
                                'X-API-KEY': apiKey || '',
                            }
                        });
                        ws.on('open', function () {
                        });
                        ws.on('message', function (message) {
                            var parsedMessage = JSON.parse(message.toString());
                            callback(parsedMessage.event, parsedMessage.model, parsedMessage.data);
                        });
                        ws.on('close', function () {
                            console.log("WebSocket connection for ".concat(model, " ").concat(event, " events closed"));
                        });
                        ws.on('error', function (error) {
                            console.error("WebSocket error for ".concat(model, " ").concat(event, " events:"), error);
                        });
                        this.wsConnections["".concat(model, "-").concat(event)] = ws;
                        return [2 /*return*/];
                }
            });
        });
    };
    DynamicApi.prototype.listen = function (model, event, callback) {
        this.connectWebSocket(model, event, callback);
    };
    DynamicApi.prototype.closeWebSocketConnections = function () {
        Object.values(this.wsConnections).forEach(function (ws) { return ws.close(); });
        this.wsConnections = {};
    };
    /**
     * Bulk operations for dynamic models
     */
    DynamicApi.prototype.modelFilterDeleteRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelFilterDelete().');
                        }
                        if (requestParameters['filter'] == null) {
                            throw new runtime.RequiredError('filter', 'Required parameter "filter" was null or undefined when calling modelFilterDelete().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/{model}/filter".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ApiFilterPayloadToJSON)(requestParameters['filter']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ApiSuccessResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.
     * Mass delete entities by filter
     */
    DynamicApi.prototype.DeleteWhere = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelFilterDeleteRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.
     * Mass update entities by filter
     */
    DynamicApi.prototype.modelFilterPutRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelFilterPut().');
                        }
                        if (requestParameters['filter'] == null) {
                            throw new runtime.RequiredError('filter', 'Required parameter "filter" was null or undefined when calling modelFilterPut().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/{model}/filter".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ApiUpdateFilterPayloadToJSON)(requestParameters['filter']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ApiSuccessResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.
     * Mass update entities by filter
     */
    DynamicApi.prototype.UpdateWhere = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelFilterPutRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Count entities that match the given filter criteria.
     * Count entities by filter
     */
    DynamicApi.prototype.modelCountPostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelCountPost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/{model}/count".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ApiFilterPayloadToJSON)(requestParameters['filter']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                }
            });
        });
    };
    /**
     * Count entities that match the given filter criteria.
     * Count entities by filter
     */
    DynamicApi.prototype.Count = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelCountPostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering
     * Filter entities
     */
    DynamicApi.prototype.modelFilterPostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelFilterPost().');
                        }
                        if (requestParameters['filter'] == null) {
                            throw new runtime.RequiredError('filter', 'Required parameter "filter" was null or undefined when calling modelFilterPost().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['pageSize'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/{model}/filter".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.QueryFilterToJSON)(requestParameters['filter']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.QueryFilterResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering
     * Filter entities
     */
    DynamicApi.prototype.GetWhere = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelFilterPostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a list of entities. Supports pagination and sorting.
     * List entities
     */
    DynamicApi.prototype.modelGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelGet().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['pageSize'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/{model}".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.QueryFilterResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a list of entities. Supports pagination and sorting.
     * List entities
     */
    DynamicApi.prototype.GetAll = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete an entity by its ID
     * Delete an entity
     */
    DynamicApi.prototype.modelIdDeleteRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelIdDelete().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling modelIdDelete().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/{model}/{id}".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))).replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id']))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete an entity by its ID
     * Delete an entity
     */
    DynamicApi.prototype.DeleteById = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelIdDeleteRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieve a single entity by its ID
     * Get an entity by ID
     */
    DynamicApi.prototype.modelIdGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelIdGet().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling modelIdGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/{model}/{id}".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))).replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id']))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                }
            });
        });
    };
    /**
     * Retrieve a single entity by its ID
     * Get an entity by ID
     */
    DynamicApi.prototype.GetById = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelIdGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update an existing entity by its ID
     * Update an entity
     */
    DynamicApi.prototype.modelIdPutRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelIdPut().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling modelIdPut().');
                        }
                        if (requestParameters['entity'] == null) {
                            throw new runtime.RequiredError('entity', 'Required parameter "entity" was null or undefined when calling modelIdPut().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/{model}/{id}".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))).replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id']))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters['entity'],
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                }
            });
        });
    };
    /**
     * Update an existing entity by its ID
     * Update an entity
     */
    DynamicApi.prototype.UpdateById = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelIdPutRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create a new entity of the specified model type
     * Create a new entity
     */
    DynamicApi.prototype.modelPostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['model'] == null) {
                            throw new runtime.RequiredError('model', 'Required parameter "model" was null or undefined when calling modelPost().');
                        }
                        if (requestParameters['entity'] == null) {
                            throw new runtime.RequiredError('entity', 'Required parameter "entity" was null or undefined when calling modelPost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/{model}".replace("{".concat("model", "}"), encodeURIComponent(String(requestParameters['model']))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters['entity'],
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                }
            });
        });
    };
    /**
     * Create a new entity of the specified model type
     * Create a new entity
     */
    DynamicApi.prototype.Create = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modelPostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return DynamicApi;
}(runtime.BaseAPI));
exports.DynamicApi = DynamicApi;
