"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfApiRelationshipSchema = instanceOfApiRelationshipSchema;
exports.ApiRelationshipSchemaFromJSON = ApiRelationshipSchemaFromJSON;
exports.ApiRelationshipSchemaFromJSONTyped = ApiRelationshipSchemaFromJSONTyped;
exports.ApiRelationshipSchemaToJSON = ApiRelationshipSchemaToJSON;
exports.ApiRelationshipSchemaToJSONTyped = ApiRelationshipSchemaToJSONTyped;
/**
 * Check if a given object implements the ApiRelationshipSchema interface.
 */
function instanceOfApiRelationshipSchema(value) {
    return true;
}
function ApiRelationshipSchemaFromJSON(json) {
    return ApiRelationshipSchemaFromJSONTyped(json, false);
}
function ApiRelationshipSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'foreignKey': json['foreignKey'] == null ? undefined : json['foreignKey'],
        'isPolymorphic': json['isPolymorphic'] == null ? undefined : json['isPolymorphic'],
        'isSlice': json['isSlice'] == null ? undefined : json['isSlice'],
        'joinTable': json['joinTable'] == null ? undefined : json['joinTable'],
        'jsonName': json['jsonName'] == null ? undefined : json['jsonName'],
        'name': json['name'] == null ? undefined : json['name'],
        'polymorphicType': json['polymorphicType'] == null ? undefined : json['polymorphicType'],
        'references': json['references'] == null ? undefined : json['references'],
        'relatedModel': json['relatedModel'] == null ? undefined : json['relatedModel'],
        'relatedTable': json['relatedTable'] == null ? undefined : json['relatedTable'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}
function ApiRelationshipSchemaToJSON(json) {
    return ApiRelationshipSchemaToJSONTyped(json, false);
}
function ApiRelationshipSchemaToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'foreignKey': value['foreignKey'],
        'isPolymorphic': value['isPolymorphic'],
        'isSlice': value['isSlice'],
        'joinTable': value['joinTable'],
        'jsonName': value['jsonName'],
        'name': value['name'],
        'polymorphicType': value['polymorphicType'],
        'references': value['references'],
        'relatedModel': value['relatedModel'],
        'relatedTable': value['relatedTable'],
        'type': value['type'],
    };
}
