/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema information for a model field
 * @export
 * @interface ApiFieldSchema
 */
export interface ApiFieldSchema {
    /**
     * AutoIncrement indicates if the field is auto-increment
     * @type {boolean}
     * @memberof ApiFieldSchema
     */
    autoIncrement?: boolean;
    /**
     * DBColumnName is the column name in the database
     * @type {string}
     * @memberof ApiFieldSchema
     */
    dbColumnName?: string;
    /**
     * IsPrimaryKey indicates if the field is a primary key
     * @type {boolean}
     * @memberof ApiFieldSchema
     */
    isPrimaryKey?: boolean;
    /**
     * Name of the field (from JSON tag if available)
     * @type {string}
     * @memberof ApiFieldSchema
     */
    name?: string;
    /**
     * List of supported operators for this field
     * @type {Array<string>}
     * @memberof ApiFieldSchema
     */
    operators?: Array<string>;
    /**
     * Type of the field (e.g., string, int)
     * @type {string}
     * @memberof ApiFieldSchema
     */
    type?: string;
}

/**
 * Check if a given object implements the ApiFieldSchema interface.
 */
export function instanceOfApiFieldSchema(value: object): value is ApiFieldSchema {
    return true;
}

export function ApiFieldSchemaFromJSON(json: any): ApiFieldSchema {
    return ApiFieldSchemaFromJSONTyped(json, false);
}

export function ApiFieldSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiFieldSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'autoIncrement': json['autoIncrement'] == null ? undefined : json['autoIncrement'],
        'dbColumnName': json['dbColumnName'] == null ? undefined : json['dbColumnName'],
        'isPrimaryKey': json['isPrimaryKey'] == null ? undefined : json['isPrimaryKey'],
        'name': json['name'] == null ? undefined : json['name'],
        'operators': json['operators'] == null ? undefined : json['operators'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function ApiFieldSchemaToJSON(json: any): ApiFieldSchema {
    return ApiFieldSchemaToJSONTyped(json, false);
}

export function ApiFieldSchemaToJSONTyped(value?: ApiFieldSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'autoIncrement': value['autoIncrement'],
        'dbColumnName': value['dbColumnName'],
        'isPrimaryKey': value['isPrimaryKey'],
        'name': value['name'],
        'operators': value['operators'],
        'type': value['type'],
    };
}

