/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Example: { "type": "COUNT", "field": "id", "alias": "count_of_id" } Represents a single aggregation operation to perform on data
 * @export
 * @interface QueryAggregateFunctionSpec
 */
export interface QueryAggregateFunctionSpec {
    /**
     * @Description Optional alias for the result of this aggregation
     * @Description If omitted, the function name may be used as an alias
     * @Description Example: "total_amount" for SUM(amount)
     * @type {string}
     * @memberof QueryAggregateFunctionSpec
     */
    alias?: string;
    /**
     * @Description The field on which the aggregation function is applied
     * @Description For COUNT(*), use "*" or leave empty
     * @type {string}
     * @memberof QueryAggregateFunctionSpec
     */
    field?: string;
    /**
     * @Description The aggregation function type (e.g., COUNT, SUM, MIN, MAX)
     * @Description Common types: COUNT, SUM, AVG, MIN, MAX
     * @type {string}
     * @memberof QueryAggregateFunctionSpec
     */
    type?: string;
}

/**
 * Check if a given object implements the QueryAggregateFunctionSpec interface.
 */
export function instanceOfQueryAggregateFunctionSpec(value: object): value is QueryAggregateFunctionSpec {
    return true;
}

export function QueryAggregateFunctionSpecFromJSON(json: any): QueryAggregateFunctionSpec {
    return QueryAggregateFunctionSpecFromJSONTyped(json, false);
}

export function QueryAggregateFunctionSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryAggregateFunctionSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'alias': json['alias'] == null ? undefined : json['alias'],
        'field': json['field'] == null ? undefined : json['field'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function QueryAggregateFunctionSpecToJSON(json: any): QueryAggregateFunctionSpec {
    return QueryAggregateFunctionSpecToJSONTyped(json, false);
}

export function QueryAggregateFunctionSpecToJSONTyped(value?: QueryAggregateFunctionSpec | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alias': value['alias'],
        'field': value['field'],
        'type': value['type'],
    };
}

