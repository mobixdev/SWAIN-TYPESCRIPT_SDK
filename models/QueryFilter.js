"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfQueryFilter = instanceOfQueryFilter;
exports.QueryFilterFromJSON = QueryFilterFromJSON;
exports.QueryFilterFromJSONTyped = QueryFilterFromJSONTyped;
exports.QueryFilterToJSON = QueryFilterToJSON;
exports.QueryFilterToJSONTyped = QueryFilterToJSONTyped;
var QuerySortSpec_1 = require("./QuerySortSpec");
var QueryAggregationSpec_1 = require("./QueryAggregationSpec");
/**
 * Check if a given object implements the QueryFilter interface.
 */
function instanceOfQueryFilter(value) {
    return true;
}
function QueryFilterFromJSON(json) {
    return QueryFilterFromJSONTyped(json, false);
}
function QueryFilterFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'aggregations': json['aggregations'] == null ? undefined : (0, QueryAggregationSpec_1.QueryAggregationSpecFromJSON)(json['aggregations']),
        'expressions': json['expressions'] == null ? undefined : json['expressions'],
        'projections': json['projections'] == null ? undefined : json['projections'],
        'sort': json['sort'] == null ? undefined : (json['sort'].map(QuerySortSpec_1.QuerySortSpecFromJSON)),
    };
}
function QueryFilterToJSON(json) {
    return QueryFilterToJSONTyped(json, false);
}
function QueryFilterToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'aggregations': (0, QueryAggregationSpec_1.QueryAggregationSpecToJSON)(value['aggregations']),
        'expressions': value['expressions'],
        'projections': value['projections'],
        'sort': value['sort'] == null ? undefined : (value['sort'].map(QuerySortSpec_1.QuerySortSpecToJSON)),
    };
}
