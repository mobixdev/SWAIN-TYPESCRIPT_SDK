/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Paginated response containing filtered entities and metadata Used for both simple list operations and complex filtered queries Contains both the data and pagination information
 * @export
 * @interface QueryFilterResponse
 */
export interface QueryFilterResponse {
    /**
     * @Description Array of entities matching the filter conditions
     * @Description For relationship queries, includes related entities based on the filter
     * @Description The actual type depends on the entity being queried
     * @type {object}
     * @memberof QueryFilterResponse
     */
    data?: object;
    /**
     * @Description Current page number (1-based indexing)
     * @Description Example: page=2 returns the second page of results
     * @Description Default is 1 if not specified
     * @type {number}
     * @memberof QueryFilterResponse
     */
    page?: number;
    /**
     * @Description Number of items per page (default may vary)
     * @Description Example: page_size=20 returns 20 items per page
     * @Description Default is typically 10 or 20 depending on configuration
     * @type {number}
     * @memberof QueryFilterResponse
     */
    pageSize?: number;
    /**
     * @Description Total number of records matching the filter conditions
     * @Description Used for calculating pagination metadata
     * @Description May be estimated for very large result sets
     * @type {number}
     * @memberof QueryFilterResponse
     */
    total?: number;
    /**
     * @Description Total number of pages based on total records and page size
     * @Description Calculated as ceil(total/page_size)
     * @Description Used for pagination UI components
     * @type {number}
     * @memberof QueryFilterResponse
     */
    totalPages?: number;
}

/**
 * Check if a given object implements the QueryFilterResponse interface.
 */
export function instanceOfQueryFilterResponse(value: object): value is QueryFilterResponse {
    return true;
}

export function QueryFilterResponseFromJSON(json: any): QueryFilterResponse {
    return QueryFilterResponseFromJSONTyped(json, false);
}

export function QueryFilterResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryFilterResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'data': json['data'] == null ? undefined : json['data'],
        'page': json['page'] == null ? undefined : json['page'],
        'pageSize': json['page_size'] == null ? undefined : json['page_size'],
        'total': json['total'] == null ? undefined : json['total'],
        'totalPages': json['total_pages'] == null ? undefined : json['total_pages'],
    };
}

export function QueryFilterResponseToJSON(json: any): QueryFilterResponse {
    return QueryFilterResponseToJSONTyped(json, false);
}

export function QueryFilterResponseToJSONTyped(value?: QueryFilterResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data': value['data'],
        'page': value['page'],
        'page_size': value['pageSize'],
        'total': value['total'],
        'total_pages': value['totalPages'],
    };
}

