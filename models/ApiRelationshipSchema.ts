/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema information for a model relationship
 * @export
 * @interface ApiRelationshipSchema
 */
export interface ApiRelationshipSchema {
    /**
     * ForeignKey is the foreign key in the relationship
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    foreignKey?: string;
    /**
     * IsPolymorphic indicates if the relationship is polymorphic
     * @type {boolean}
     * @memberof ApiRelationshipSchema
     */
    isPolymorphic?: boolean;
    /**
     * IsSlice indicates if the relationship is a slice
     * @type {boolean}
     * @memberof ApiRelationshipSchema
     */
    isSlice?: boolean;
    /**
     * JoinTable is the join table in the relationship
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    joinTable?: string;
    /**
     * JsonName of the relationship (from JSON tag if available)
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    jsonName?: string;
    /**
     * Name of the relationship (from JSON tag if available)
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    name?: string;
    /**
     * PolymorphicType is the type of the polymorphic relationship
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    polymorphicType?: string;
    /**
     * References are the references in the relationship
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    references?: string;
    /**
     * Name of the related model
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    relatedModel?: string;
    /**
     * Name of the related table
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    relatedTable?: string;
    /**
     * Type of relationship (hasOne, hasMany, belongsTo, manyToMany)
     * @type {string}
     * @memberof ApiRelationshipSchema
     */
    type?: string;
}

/**
 * Check if a given object implements the ApiRelationshipSchema interface.
 */
export function instanceOfApiRelationshipSchema(value: object): value is ApiRelationshipSchema {
    return true;
}

export function ApiRelationshipSchemaFromJSON(json: any): ApiRelationshipSchema {
    return ApiRelationshipSchemaFromJSONTyped(json, false);
}

export function ApiRelationshipSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiRelationshipSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'foreignKey': json['foreignKey'] == null ? undefined : json['foreignKey'],
        'isPolymorphic': json['isPolymorphic'] == null ? undefined : json['isPolymorphic'],
        'isSlice': json['isSlice'] == null ? undefined : json['isSlice'],
        'joinTable': json['joinTable'] == null ? undefined : json['joinTable'],
        'jsonName': json['jsonName'] == null ? undefined : json['jsonName'],
        'name': json['name'] == null ? undefined : json['name'],
        'polymorphicType': json['polymorphicType'] == null ? undefined : json['polymorphicType'],
        'references': json['references'] == null ? undefined : json['references'],
        'relatedModel': json['relatedModel'] == null ? undefined : json['relatedModel'],
        'relatedTable': json['relatedTable'] == null ? undefined : json['relatedTable'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function ApiRelationshipSchemaToJSON(json: any): ApiRelationshipSchema {
    return ApiRelationshipSchemaToJSONTyped(json, false);
}

export function ApiRelationshipSchemaToJSONTyped(value?: ApiRelationshipSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'foreignKey': value['foreignKey'],
        'isPolymorphic': value['isPolymorphic'],
        'isSlice': value['isSlice'],
        'joinTable': value['joinTable'],
        'jsonName': value['jsonName'],
        'name': value['name'],
        'polymorphicType': value['polymorphicType'],
        'references': value['references'],
        'relatedModel': value['relatedModel'],
        'relatedTable': value['relatedTable'],
        'type': value['type'],
    };
}

