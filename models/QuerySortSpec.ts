/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Specifies a field and the direction for sorting (ascending or descending) Example: {"field": "name", "direction": "asc"} Field names can be struct field names, JSON field names, or database column names
 * @export
 * @interface QuerySortSpec
 */
export interface QuerySortSpec {
    /**
     * @Description The sort direction: "asc" for ascending, "desc" for descending
     * @Description Case-insensitive, so "ASC", "asc", and "Asc" are all valid
     * @type {string}
     * @memberof QuerySortSpec
     */
    direction?: string;
    /**
     * @Description The name of the field to sort by
     * @Description Can be a struct field name (e.g., "FirstName"), JSON field name (from json tag),
     * @Description or database column name (e.g., "first_name")
     * @type {string}
     * @memberof QuerySortSpec
     */
    field?: string;
}

/**
 * Check if a given object implements the QuerySortSpec interface.
 */
export function instanceOfQuerySortSpec(value: object): value is QuerySortSpec {
    return true;
}

export function QuerySortSpecFromJSON(json: any): QuerySortSpec {
    return QuerySortSpecFromJSONTyped(json, false);
}

export function QuerySortSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuerySortSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'direction': json['direction'] == null ? undefined : json['direction'],
        'field': json['field'] == null ? undefined : json['field'],
    };
}

export function QuerySortSpecToJSON(json: any): QuerySortSpec {
    return QuerySortSpecToJSONTyped(json, false);
}

export function QuerySortSpecToJSONTyped(value?: QuerySortSpec | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'direction': value['direction'],
        'field': value['field'],
    };
}

