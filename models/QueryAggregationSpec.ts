/* tslint:disable */
/* eslint-disable */
/**
 * SWAIN API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QueryAggregateFunctionSpec } from './QueryAggregateFunctionSpec';
import {
    QueryAggregateFunctionSpecFromJSON,
    QueryAggregateFunctionSpecFromJSONTyped,
    QueryAggregateFunctionSpecToJSON,
    QueryAggregateFunctionSpecToJSONTyped,
} from './QueryAggregateFunctionSpec';

/**
 * Allows specifying functions like COUNT, SUM on fields, with an optional group-by clause Used for aggregating data in queries, similar to SQL GROUP BY with aggregate functions Example: {"functions": [{"type": "COUNT", "field": "id"}], "group_by": ["status"]}
 * @export
 * @interface QueryAggregationSpec
 */
export interface QueryAggregationSpec {
    /**
     * @Description Optional aggregator-based conditions to be applied in a HAVING clause (if using SQL)
     * @Description These expressions may reference aggregator functions like SUM(...) or COUNT(...)
     * @type {Array<object>}
     * @memberof QueryAggregationSpec
     */
    expressions?: Array<object>;
    /**
     * @Description A list of aggregation functions (e.g., COUNT, SUM, MIN, MAX) to apply
     * @Description Each function specifies the type, field, and optional alias
     * @type {Array<QueryAggregateFunctionSpec>}
     * @memberof QueryAggregationSpec
     */
    functions?: Array<QueryAggregateFunctionSpec>;
    /**
     * @Description Fields for grouping results (e.g., by "status" or ["status","category"])
     * @Description Similar to SQL GROUP BY clause
     * @type {Array<string>}
     * @memberof QueryAggregationSpec
     */
    groupBy?: Array<string>;
}

/**
 * Check if a given object implements the QueryAggregationSpec interface.
 */
export function instanceOfQueryAggregationSpec(value: object): value is QueryAggregationSpec {
    return true;
}

export function QueryAggregationSpecFromJSON(json: any): QueryAggregationSpec {
    return QueryAggregationSpecFromJSONTyped(json, false);
}

export function QueryAggregationSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryAggregationSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'expressions': json['expressions'] == null ? undefined : json['expressions'],
        'functions': json['functions'] == null ? undefined : ((json['functions'] as Array<any>).map(QueryAggregateFunctionSpecFromJSON)),
        'groupBy': json['group_by'] == null ? undefined : json['group_by'],
    };
}

export function QueryAggregationSpecToJSON(json: any): QueryAggregationSpec {
    return QueryAggregationSpecToJSONTyped(json, false);
}

export function QueryAggregationSpecToJSONTyped(value?: QueryAggregationSpec | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'expressions': value['expressions'],
        'functions': value['functions'] == null ? undefined : ((value['functions'] as Array<any>).map(QueryAggregateFunctionSpecToJSON)),
        'group_by': value['groupBy'],
    };
}

